# -*- coding: utf-8 -*-
"""5&6bala.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hMlG8Cdfcyyt5l5SfD7iT_z2vzDPSW17
"""

from tensorflow.keras.applications import InceptionV3
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img
import numpy as np
from tensorflow.keras.applications import Xception
from tensorflow.keras.applications.xception import preprocess_input
# 1. Recreate the exact same architecture
weights_path = "/content/xception_weights_tf_dim_ordering_tf_kernels_notop.h5"
base = Xception(weights=weights_path, include_top=False)
x = base.output
x = GlobalAveragePooling2D()(x)
x = Dense(64, activation='relu')(x)
preds = Dense(7, activation='softmax')(x)
model = Model(inputs=base.input, outputs=preds)

# 2. Load your trained weights
model.load_weights("/content/xception_fish_model_1trans.hdf5")
print("✅ Weights loaded successfully!")



# 4. Preprocess a single image for prediction
def preprocess_image(img_path):
    img = load_img(img_path, target_size=(299, 299))  # resize to InceptionV3 input size
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    from tensorflow.keras.applications.xception import preprocess_input
    img_array = preprocess_input(img_array)
    return img_array

# Example: predict on one image
img_path = "/content/Bacterial diseases - Aeromoniasis (105).jpg"  # replace with your image path
img_array = preprocess_image(img_path)
pred = model.predict(img_array)

# 5. Interpret prediction
class_labels = ['Bacterial Red disease', 'Bacterial diseases - Aeromoniasis', 'Bacterial gill disease', 'Fungal diseases Saprolegniasis', 'Healthy Fish', 'Parasitic diseases', 'Viral diseases White tail disease'] # change based on your dataset
predicted_class = class_labels[np.argmax(pred)]
print(f"Predicted class: {predicted_class}")

import numpy as np
import pickle
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import Dense, Dropout, Input, GlobalAveragePooling2D, Reshape, Conv2D, Flatten
from tensorflow.keras.applications import InceptionV3
from tensorflow.keras.applications.inception_v3 import preprocess_input
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from __future__ import print_function
import os
import numpy as np
import h5py
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dropout, Flatten, Dense, Input, Conv2D, BatchNormalization, Activation
from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau
from tensorflow.keras import optimizers


# 1️⃣ Recreate the feature extractor (must match training)
weights_path = "/content/xception_weights_tf_dim_ordering_tf_kernels_notop.h5"
base = Xception(weights=weights_path, include_top=False, input_shape=(299, 299, 3)) # Explicitly set input shape
feature_extractor = Model(inputs=base.input, outputs=base.output) # Output before pooling


# 2️⃣ Recreate the classifier architecture (same as training)
# Input shape matches the output shape of the feature extractor (7, 7, 2048) based on training code
inputs = Input(shape=(7, 7, 2048))
x = Conv2D(64, (1, 1), activation='relu', padding='same')(inputs)
x = Dropout(0.5)(x)
x = Flatten()(x)
outputs  = Dense(7, activation='softmax')(x)
model = Model(inputs=inputs, outputs=outputs)

# 3️⃣ Load the trained classifier weights
# Assuming xception_fish_model_2fe.hdf5 is the saved model from the training code
model.load_weights("/content/xception_fish_model_2fe.hdf5")
print("✅ Classifier weights loaded successfully!")

label_map = {0:'Bacterial Red disease', 1:'Bacterial diseases - Aeromoniasis',2: 'Bacterial gill disease',3: 'Fungal diseases Saprolegniasis', 4:'Healthy Fish',5:'Parasitic diseases', 6:'Viral diseases White tail disease'}
# Reverse mapping: {index → class_name}
idx_to_class = {v: k for k, v in label_map.items()}
print("Loaded label mapping:", idx_to_class)

# 5️⃣ Define preprocessing for single image
def preprocess_image(img_path):
    img = load_img(img_path, target_size=(299, 299))
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)
    return img_array

# 6️⃣ Predict on an image
img_path = "/content/Bacterial gill disease (104).jpg"   # replace with your image path
img_array = preprocess_image(img_path)

# Step A: extract features
# Extract features using the feature extractor model which outputs (None, 10, 10, 2048) based on previous errors
features = feature_extractor.predict(img_array)

# Step B: run classifier on features
pred = model.predict(features)

# Step C: interpret result
predicted_class = idx_to_class[np.argmax(pred)]
confidence = np.max(pred)
print(f"Predicted class: {predicted_class} ({confidence:.2f} confidence)")

import tensorflow as tf
from tensorflow.keras.applications import Xception

# Define the Xception base model with include_top=False and the expected input shape
base_model_test = Xception(weights=None, include_top=False, input_shape=(299, 299, 3))

# Create a dummy input tensor with a batch size of 1 and the expected image dimensions
dummy_input = tf.random.uniform((1, 299, 299, 3))

# Pass the dummy input through the base model to get the output
output_features = base_model_test(dummy_input)

# Print the shape of the output features
print("Shape of output features from minimal Xception test:", output_features.shape)